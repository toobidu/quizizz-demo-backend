using ConsoleApp1.Config;
using ConsoleApp1.Service.Interface;
namespace ConsoleApp1.Controller;
public class GameController
{
    private readonly ISocketService _socketService;
    private readonly IJoinRoomService _joinRoomService;
    public GameController(ISocketService socketService, IJoinRoomService joinRoomService)
    {
        _socketService = socketService;
        _joinRoomService = joinRoomService;
    }
    public async Task<ApiResponse<string>> StartGameAsync(string roomCode, int hostUserId)
    {
        try
        {
            Console.WriteLine($"üéÆ [Backend HTTP API] StartGameAsync called: roomCode={roomCode}, hostUserId={hostUserId}");
            
            // Ki·ªÉm tra tham s·ªë ƒë·∫ßu v√†o
            if (string.IsNullOrWhiteSpace(roomCode))
            {
                return ApiResponse<string>.Fail("M√£ ph√≤ng kh√¥ng h·ª£p l·ªá", 400, "INVALID_ROOM_CODE", "/api/game/start");
            }
            if (hostUserId <= 0)
            {
                return ApiResponse<string>.Fail("ID host kh√¥ng h·ª£p l·ªá", 400, "INVALID_HOST_ID", "/api/game/start");
            }
            // Ki·ªÉm tra ph√≤ng c√≥ t·ªìn t·∫°i kh√¥ng
            var room = await _joinRoomService.GetRoomByCodeAsync(roomCode);
            if (room == null)
            {
                return ApiResponse<string>.Fail("Ph√≤ng kh√¥ng t·ªìn t·∫°i", 404, "ROOM_NOT_FOUND", "/api/game/start");
            }
            // Ki·ªÉm tra quy·ªÅn host
            if (room.OwnerId != hostUserId)
            {
                return ApiResponse<string>.Fail("Ch·ªâ host m·ªõi c√≥ th·ªÉ b·∫Øt ƒë·∫ßu game", 403, "UNAUTHORIZED", "/api/game/start");
            }
            // Ki·ªÉm tra tr·∫°ng th√°i ph√≤ng
            if (room.Status != "waiting" && room.Status != "ready")
            {
                return ApiResponse<string>.Fail("Ph√≤ng kh√¥ng ·ªü tr·∫°ng th√°i s·∫µn s√†ng ƒë·ªÉ b·∫Øt ƒë·∫ßu game", 400, "INVALID_ROOM_STATUS", "/api/game/start");
            }
            // B·∫Øt ƒë·∫ßu game qua Socket.IO
            await _socketService.StartGameAsync(roomCode);
            return ApiResponse<string>.Success("Game ƒë√£ b·∫Øt ƒë·∫ßu", "Game started successfully", 200, "/api/game/start");
        }
        catch (Exception ex)
        {
            return ApiResponse<string>.Fail("L·ªói m√°y ch·ªß: " + ex.Message, 500, "SERVER_ERROR", "/api/game/start");
        }
    }
    public async Task<ApiResponse<string>> SendQuestionAsync(string roomCode, object question, int questionIndex, int totalQuestions)
    {
        try
        {
            await _socketService.SendQuestionAsync(roomCode, question, questionIndex, totalQuestions);
            return ApiResponse<string>.Success("C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c g·ª≠i", "Question sent", 200, "/api/game/question");
        }
        catch (Exception ex)
        {
            return ApiResponse<string>.Fail("L·ªói m√°y ch·ªß: " + ex.Message, 500, "SERVER_ERROR", "/api/game/question");
        }
    }
}
