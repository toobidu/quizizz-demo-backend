using ConsoleApp1.Service.Interface.Socket;
using ConsoleApp1.Service.Implement.Socket.RoomManagement;
using ConsoleApp1.Model.DTO.Game;
using System.Collections.Concurrent;
using System.Net.WebSockets;
using System.Text.Json;
using ConsoleApp1.Config;
using ConsoleApp1.Service.Interface;
using ConsoleApp1.Repository.Interface;
using ConsoleApp1.Model.Entity.Rooms;
namespace ConsoleApp1.Service.Implement.Socket;
/// <summary>
/// Service qu·∫£n l√Ω ph√≤ng ch∆°i qua WebSocket - Ch·ªãu tr√°ch nhi·ªám:
/// 1. X·ª≠ l√Ω vi·ªác tham gia ph√≤ng (join room)
/// 2. X·ª≠ l√Ω vi·ªác r·ªùi ph√≤ng (leave room)  
/// 3. C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi ch∆°i trong ph√≤ng
/// 4. Broadcast th√¥ng tin ph√≤ng ƒë·∫øn t·∫•t c·∫£ client
/// 5. Qu·∫£n l√Ω host v√† chuy·ªÉn quy·ªÅn host
/// </summary>
public class RoomManagementSocketServiceImplement : IRoomManagementSocketService
{
    // Dictionary l∆∞u tr·ªØ t·∫•t c·∫£ c√°c ph√≤ng game hi·ªán t·∫°i (shared)
    private readonly ConcurrentDictionary<string, GameRoom> _gameRooms;
    // Dictionary √°nh x·∫° socketId v·ªõi roomCode (shared)
    private readonly ConcurrentDictionary<string, string> _socketToRoom;
    // Dictionary l∆∞u tr·ªØ c√°c k·∫øt n·ªëi WebSocket (shared)
    private readonly ConcurrentDictionary<string, WebSocket> _connections;
    // Components
    private readonly RoomManager _roomManager;
    private readonly RoomEventBroadcaster _eventBroadcaster;
    // Database services
    private readonly ISocketConnectionDbService? _socketConnectionDbService;
    private readonly IRoomRepository? _roomRepository;
    
    /// <summary>
    /// Constructor nh·∫≠n shared dictionaries v√† database services
    /// </summary>
    public RoomManagementSocketServiceImplement(
        ConcurrentDictionary<string, GameRoom> gameRooms,
        ConcurrentDictionary<string, string> socketToRoom,
        ConcurrentDictionary<string, WebSocket> connections,
        ISocketConnectionDbService socketConnectionDbService,
        IRoomRepository roomRepository)
    {
        _gameRooms = gameRooms;
        _socketToRoom = socketToRoom;
        _connections = connections;
        _socketConnectionDbService = socketConnectionDbService;
        _roomRepository = roomRepository;
        _roomManager = new RoomManager(_gameRooms, _socketToRoom, _connections);
        _eventBroadcaster = new RoomEventBroadcaster(_gameRooms, _connections, socketConnectionDbService, socketToRoom);
    }
    
    /// <summary>
    /// Constructor fallback cho backward compatibility
    /// </summary>
    public RoomManagementSocketServiceImplement(
        ConcurrentDictionary<string, GameRoom> gameRooms,
        ConcurrentDictionary<string, string> socketToRoom,
        ConcurrentDictionary<string, WebSocket> connections)
    {
        _gameRooms = gameRooms;
        _socketToRoom = socketToRoom;
        _connections = connections;
        _socketConnectionDbService = null;
        _roomRepository = null;
        _roomManager = new RoomManager(_gameRooms, _socketToRoom, _connections);
        _eventBroadcaster = new RoomEventBroadcaster(_gameRooms, _connections);
    }
    /// <summary>
    /// Constructor m·∫∑c ƒë·ªãnh (backward compatibility)
    /// </summary>
    public RoomManagementSocketServiceImplement()
    {
        _gameRooms = new ConcurrentDictionary<string, GameRoom>();
        _socketToRoom = new ConcurrentDictionary<string, string>();
        _connections = new ConcurrentDictionary<string, WebSocket>();
        _roomManager = new RoomManager(_gameRooms, _socketToRoom, _connections);
        _eventBroadcaster = new RoomEventBroadcaster(_gameRooms, _connections);
    }
    // Dictionary ƒë·ªÉ theo d√µi th·ªùi gian join ph√≤ng cu·ªëi c√πng c·ªßa m·ªói ng∆∞·ªùi ch∆°i
    private readonly ConcurrentDictionary<string, DateTime> _lastJoinTimes = new();
    /// <summary>
    /// X·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i tham gia ph√≤ng
    /// </summary>
    /// <param name="socketId">ID c·ªßa WebSocket connection</param>
    /// <param name="roomCode">M√£ ph√≤ng mu·ªën tham gia</param>
    /// <param name="username">T√™n ng∆∞·ªùi ch∆°i</param>
    /// <param name="userId">ID ng∆∞·ªùi ch∆°i trong database</param>
    public async Task JoinRoomAsync(string socketId, string roomCode, string username, int userId)
    {
        bool success = false;
        string message = "";
        
        try
        {
            // ‚úÖ ENHANCED VALIDATION: Ki·ªÉm tra v√† x·ª≠ l√Ω username r·ªóng
            username = string.IsNullOrWhiteSpace(username) ? $"User_{userId}" : username.Trim();
            Console.WriteLine($"üéÆ [RoomManagement] JoinRoomAsync: socketId='{socketId}', roomCode='{roomCode}', username='{username}', userId={userId}");

            // ‚úÖ VALIDATE USERID FORMAT
            if (userId <= 0)
            {
                Console.WriteLine($"‚ùå [RoomManagement] Invalid userId: {userId}");
                await _eventBroadcaster.SendToPlayerAsync(socketId, "JOIN_ROOM_ACK", new { 
                    roomCode, 
                    userId, 
                    username, 
                    success = false, 
                    message = "UserId ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng"
                });
                return;
            }

            // Ki·ªÉm tra xem ng∆∞·ªùi ch∆°i ƒë√£ join g·∫ßn ƒë√¢y ch∆∞a (trong v√≤ng 2 gi√¢y)
            string cacheKey = $"join_{roomCode}_{userId}";
            if (_lastJoinTimes.TryGetValue(cacheKey, out var lastTime) && 
                (DateTime.UtcNow - lastTime).TotalMilliseconds < 2000)
            {
                Console.WriteLine($"‚ö†Ô∏è [RoomManagement] Rate limited join for user {userId} to room {roomCode}");
                // V·∫´n g·ª≠i th√¥ng tin ph√≤ng hi·ªán t·∫°i cho client
                var existingRoom = _roomManager.GetRoom(roomCode);
                if (existingRoom != null)
                {
                    var existingRoomData = new
                    {
                        roomCode = roomCode,
                        players = existingRoom.Players.Select(p => new {
                            userId = p.UserId,
                            username = p.Username,
                            score = p.Score,
                            isHost = p.IsHost,
                            status = p.Status,
                            timeTaken = "00:00:00"
                        }).ToList(),
                        totalPlayers = existingRoom.Players.Count,
                        maxPlayers = 10, // Gi√° tr·ªã m·∫∑c ƒë·ªãnh v√¨ GameRoom kh√¥ng c√≥ thu·ªôc t√≠nh MaxPlayers
                        status = "waiting", // Gi√° tr·ªã m·∫∑c ƒë·ªãnh v√¨ GameRoom kh√¥ng c√≥ thu·ªôc t√≠nh Status
                        host = existingRoom.Players.FirstOrDefault(p => p.IsHost)?.Username
                    };
                    await _eventBroadcaster.SendToPlayerAsync(socketId, RoomManagementConstants.Events.RoomPlayersUpdated, existingRoomData);
                    
                    // ‚úÖ G·ª¨I ACK CHO DUPLICATE REQUEST
                    success = true;
                    message = "Already joined (duplicate request ignored)";
                    await _eventBroadcaster.SendToPlayerAsync(socketId, "JOIN_ROOM_ACK", new { 
                        roomCode, 
                        userId, 
                        username, 
                        success, 
                        message,
                        isHost = existingRoom.Players.FirstOrDefault(p => p.UserId == userId)?.IsHost ?? false
                    });
                }
                return;
            }
            // C·∫≠p nh·∫≠t th·ªùi gian join m·ªõi nh·∫•t
            _lastJoinTimes[cacheKey] = DateTime.UtcNow;
            
            // Th√™m player v√†o room
            var (joinSuccess, joinMessage, joinedPlayer) = _roomManager.AddPlayerToRoom(roomCode, socketId, username, userId);
            if (!joinSuccess)
            {
                // ‚úÖ G·ª¨I ACK CHO FAILED REQUEST
                await _eventBroadcaster.SendToPlayerAsync(socketId, "JOIN_ROOM_ACK", new { 
                    roomCode, 
                    userId, 
                    username, 
                    success = false, 
                    message = joinMessage
                });
                return;
            }
            if (joinedPlayer == null)
            {
                // ‚úÖ G·ª¨I ACK CHO NULL PLAYER
                await _eventBroadcaster.SendToPlayerAsync(socketId, "JOIN_ROOM_ACK", new { 
                    roomCode, 
                    userId, 
                    username, 
                    success = false, 
                    message = "Failed to create player"
                });
                return;
            }

            // L·∫•y th√¥ng tin ph√≤ng ƒë·ªÉ g·ª≠i th√¥ng tin v·ªÅ t·∫•t c·∫£ ng∆∞·ªùi ch∆°i
            var room = _roomManager.GetRoom(roomCode);
            if (room == null)
            {
                // ‚úÖ G·ª¨I ACK CHO ROOM NOT FOUND
                await _eventBroadcaster.SendToPlayerAsync(socketId, "JOIN_ROOM_ACK", new { 
                    roomCode, 
                    userId, 
                    username, 
                    success = false, 
                    message = "Room not found"
                });
                return;
            }
            // G·ª≠i th√¥ng b√°o welcome cho player v·ª´a join
            await _eventBroadcaster.SendWelcomeMessageAsync(socketId, roomCode, joinedPlayer.IsHost, joinMessage);
            // G·ª≠i th√¥ng tin v·ªÅ t·∫•t c·∫£ ng∆∞·ªùi ch∆°i hi·ªán c√≥ trong ph√≤ng cho ng∆∞·ªùi m·ªõi tham gia
            foreach (var existingPlayer in room.Players.Where(p => p.UserId != userId))
            {
                var playerData = new
                {
                    userId = existingPlayer.UserId,
                    username = existingPlayer.Username,
                    score = existingPlayer.Score,
                    isHost = existingPlayer.IsHost,
                    timeTaken = "00:00:00"
                };
                await _eventBroadcaster.SendToPlayerAsync(socketId, RoomManagementConstants.Events.PlayerJoined, playerData);
            }
            // G·ª≠i s·ª± ki·ªán room-players-updated cho ng∆∞·ªùi ch∆°i m·ªõi
            var roomPlayersData = new
            {
                roomCode = roomCode,
                players = room.Players.Select(p => new {
                    userId = p.UserId,
                    username = p.Username,
                    score = p.Score,
                    isHost = p.IsHost,
                    status = p.Status,
                    timeTaken = "00:00:00"
                }).ToList(),
                totalPlayers = room.Players.Count,
                maxPlayers = 10, // Gi√° tr·ªã m·∫∑c ƒë·ªãnh v√¨ GameRoom kh√¥ng c√≥ thu·ªôc t√≠nh MaxPlayers
                status = "waiting", // Gi√° tr·ªã m·∫∑c ƒë·ªãnh v√¨ GameRoom kh√¥ng c√≥ thu·ªôc t√≠nh Status
                host = room.Players.FirstOrDefault(p => p.IsHost)?.Username
            };
            await _eventBroadcaster.SendToPlayerAsync(socketId, RoomManagementConstants.Events.RoomPlayersUpdated, roomPlayersData);
            
            // ‚úÖ S·ª¨A: Broadcast s·ª± ki·ªán player-joined cho c√°c user kh√°c trong ph√≤ng (kh√¥ng g·ª≠i cho ch√≠nh user v·ª´a join)
            // Thay th·∫ø BroadcastPlayerJoinedEventAsync b·∫±ng method tr·ª±c ti·∫øp ƒë·ªÉ fix v·∫•n ƒë·ªÅ broadcast
            // await BroadcastPlayerJoinedEventAsync(roomCode, userId, username); // <- Comment d√≤ng c≈©
            await BroadcastPlayerJoinedToOthersAsync(roomCode, userId, username); // <- S·ª≠ d·ª•ng method m·ªõi
            
            // G·ª≠i s·ª± ki·ªán room-players-updated ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi ch∆°i trong ph√≤ng
            // ƒê·∫£m b·∫£o s·ª± ki·ªán n√†y ƒë∆∞·ª£c g·ª≠i sau s·ª± ki·ªán player-joined
            await UpdateRoomPlayersAsync(roomCode);

            // ‚úÖ L∆ØU SOCKET CONNECTION V√ÄO DATABASE
            Console.WriteLine($"üíæ [RoomManagement] About to save socket connection to database: {socketId} -> {roomCode}");
            await SaveSocketConnectionToDatabase(socketId, userId, roomCode);
            Console.WriteLine($"üíæ [RoomManagement] Completed saving socket connection to database for {socketId}");

            // ‚úÖ G·ª¨I JOIN_ROOM_ACK TH√ÄNH C√îNG
            success = true;
            message = "Joined room successfully";
            await _eventBroadcaster.SendToPlayerAsync(socketId, "JOIN_ROOM_ACK", new { 
                roomCode, 
                userId, 
                username, 
                success, 
                message,
                isHost = joinedPlayer.IsHost,
                totalPlayers = room.Players.Count
            });
            
            Console.WriteLine($"‚úÖ [RoomManagement] User {username} (ID: {userId}) successfully joined room {roomCode}");
        }
        catch (Exception ex)
        {
            // ‚úÖ G·ª¨I ACK CHO EXCEPTION
            Console.WriteLine($"‚ùå [RoomManagement] Error in JoinRoomAsync: {ex.Message}");
            try 
            {
                await _eventBroadcaster.SendToPlayerAsync(socketId, "JOIN_ROOM_ACK", new { 
                    roomCode, 
                    userId, 
                    username, 
                    success = false, 
                    message = $"Internal error: {ex.Message}"
                });
            }
            catch 
            {
                // Log but don't throw - avoid cascade failures
                Console.WriteLine($"‚ùå [RoomManagement] Failed to send error ACK to {socketId}");
            }
        }
    }
    /// <summary>
    /// X·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i r·ªùi ph√≤ng
    /// </summary>
    /// <param name="socketId">ID c·ªßa WebSocket connection</param>
    /// <param name="roomCode">M√£ ph√≤ng ƒëang tham gia</param>
    public async Task LeaveRoomAsync(string socketId, string roomCode)
    {
        try
        {
            // L∆∞u th√¥ng tin ph√≤ng v√† ng∆∞·ªùi ch∆°i tr∆∞·ªõc khi x√≥a ƒë·ªÉ s·ª≠ d·ª•ng sau
            var room = _roomManager.GetRoom(roomCode);
            var playerToRemove = room?.Players.FirstOrDefault(p => p.SocketId == socketId);
            if (room == null || playerToRemove == null)
            {
                return;
            }
            // Log th√¥ng tin ng∆∞·ªùi ch∆°i s·∫Ω b·ªã x√≥a
            // L∆∞u userId v√† username ƒë·ªÉ s·ª≠ d·ª•ng sau khi x√≥a
            int userId = playerToRemove.UserId;
            string username = playerToRemove.Username;
            // X√≥a ng∆∞·ªùi ch∆°i kh·ªèi ph√≤ng
            var (success, message, removedPlayer, newHost) = _roomManager.RemovePlayerFromRoom(socketId, roomCode);
            if (!success)
            {
                return;
            }
            // Th√¥ng b√°o host m·ªõi n·∫øu c√≥
            if (newHost != null)
            {
                await _eventBroadcaster.BroadcastHostChangeAsync(roomCode, newHost);
            }
            // C·∫≠p nh·∫≠t danh s√°ch player n·∫øu room c√≤n t·ªìn t·∫°i
            if (_roomManager.RoomExists(roomCode))
            {
                var updatedRoom = _roomManager.GetRoom(roomCode);
                if (updatedRoom != null)
                {
                    // G·ª≠i s·ª± ki·ªán player-left tr∆∞·ªõc
                    var playerLeftData = new
                    {
                        userId = userId,
                        username = username
                    };
                    await _eventBroadcaster.BroadcastToRoomAsync(roomCode, "player-left", playerLeftData);
                    // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o client x·ª≠ l√Ω s·ª± ki·ªán player-left tr∆∞·ªõc
                    await Task.Delay(200);
                    // Sau ƒë√≥ g·ª≠i c·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi ch∆°i
                    await _eventBroadcaster.BroadcastRoomPlayersUpdateAsync(roomCode, updatedRoom.Players);
                }
            }
        }
        catch (Exception ex)
        {
        }
    }
    // Dictionary ƒë·ªÉ theo d√µi th·ªùi gian g·ª≠i s·ª± ki·ªán cu·ªëi c√πng cho m·ªói ph√≤ng
    private readonly ConcurrentDictionary<string, DateTime> _lastUpdateTimes = new();
    /// <summary>
    /// C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi ch∆°i trong ph√≤ng cho t·∫•t c·∫£ client
    /// </summary>
    /// <param name="roomCode">M√£ ph√≤ng c·∫ßn c·∫≠p nh·∫≠t</param>
    public async Task UpdateRoomPlayersAsync(string roomCode)
    {
        try
        {
            // Ki·ªÉm tra xem ƒë√£ g·ª≠i s·ª± ki·ªán n√†y g·∫ßn ƒë√¢y ch∆∞a (trong v√≤ng 1 gi√¢y)
            string cacheKey = $"update_{roomCode}";
            if (_lastUpdateTimes.TryGetValue(cacheKey, out var lastTime) && 
                (DateTime.UtcNow - lastTime).TotalMilliseconds < 1000)
            {
                return;
            }
            // C·∫≠p nh·∫≠t th·ªùi gian g·ª≠i m·ªõi nh·∫•t
            _lastUpdateTimes[cacheKey] = DateTime.UtcNow;
            var room = _roomManager.GetRoom(roomCode);
            if (room == null)
            {
                return;
            }
            if (room.Players.Count == 0)
            {
                // V·∫´n g·ª≠i c·∫≠p nh·∫≠t v·ªõi danh s√°ch tr·ªëng ƒë·ªÉ frontend c·∫≠p nh·∫≠t
                await _eventBroadcaster.BroadcastRoomPlayersUpdateAsync(roomCode, new List<GamePlayer>());
                return;
            }
            // Ch·ªâ g·ª≠i m·ªôt l·∫ßn duy nh·∫•t
            await _eventBroadcaster.BroadcastRoomPlayersUpdateAsync(roomCode, room.Players);
        }
        catch (Exception ex)
        {
        }
    }

    /// <summary>
    /// Broadcast s·ª± ki·ªán player-joined ƒë·∫øn nh·ªØng ng∆∞·ªùi ch∆°i kh√°c trong ph√≤ng (TR·ª∞C TI·∫æP)
    /// KH√îNG g·ª≠i cho ng∆∞·ªùi v·ª´a join ƒë·ªÉ tr√°nh duplicate event
    /// Method n√†y thay th·∫ø cho BroadcastPlayerJoinedEventAsync ƒë·ªÉ fix v·∫•n ƒë·ªÅ broadcast
    /// </summary>
    /// <param name="roomCode">M√£ ph√≤ng</param>
    /// <param name="newUserId">ID ng∆∞·ªùi ch∆°i m·ªõi (s·∫Ω b·ªã lo·∫°i tr·ª´)</param>
    /// <param name="username">T√™n ng∆∞·ªùi ch∆°i m·ªõi</param>
    private async Task BroadcastPlayerJoinedToOthersAsync(string roomCode, int newUserId, string username)
    {
        try
        {
            var room = _roomManager.GetRoom(roomCode);
            if (room == null || room.Players.Count <= 1)
            {
                Console.WriteLine($"üè† [RoomManagement] No other players to notify in room {roomCode}");
                return;
            }

            var playerJoinedData = new
            {
                userId = newUserId,
                username = username,
                score = 0,
                isHost = room.Players.FirstOrDefault(p => p.UserId == newUserId)?.IsHost ?? false,
                status = room.Players.FirstOrDefault(p => p.UserId == newUserId)?.Status ?? "waiting",
                timeTaken = "00:00:00",
                roomCode = roomCode,
                timestamp = DateTime.UtcNow
            };

            var messageObj = new
            {
                type = RoomManagementConstants.Events.PlayerJoined,
                data = playerJoinedData,
                timestamp = DateTime.UtcNow
            };

            var message = JsonSerializer.Serialize(messageObj, new JsonSerializerOptions 
            { 
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase 
            });
            var buffer = System.Text.Encoding.UTF8.GetBytes(message);

            // G·ª≠i ch·ªâ ƒë·∫øn nh·ªØng ng∆∞·ªùi ch∆°i KH√ÅC (tr·ª´ ng∆∞·ªùi v·ª´a join)
            var otherPlayers = room.Players.Where(p => p.UserId != newUserId && !string.IsNullOrEmpty(p.SocketId)).ToList();
            
            Console.WriteLine($"üéØ [RoomManagement] Broadcasting player-joined to {otherPlayers.Count} other players in room {roomCode}");
            Console.WriteLine($"üéØ [RoomManagement] Player joined data: {JsonSerializer.Serialize(playerJoinedData, new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase })}");

            var sendTasks = otherPlayers.Select(async player =>
            {
                if (_connections.TryGetValue(player.SocketId!, out var socket) && socket.State == WebSocketState.Open)
                {
                    try
                    {
                        await socket.SendAsync(buffer, WebSocketMessageType.Text, true, CancellationToken.None);
                        Console.WriteLine($"üì§ [RoomManagement] Sent player-joined to {player.Username} (userId: {player.UserId})");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"‚ùå [RoomManagement] Failed to send player-joined to {player.Username}: {ex.Message}");
                    }
                }
                else
                {
                    Console.WriteLine($"‚ö†Ô∏è [RoomManagement] Socket not found or not open for {player.Username}");
                }
            });

            await Task.WhenAll(sendTasks);
            Console.WriteLine($"‚úÖ [RoomManagement] Completed broadcasting player-joined for {username} in room {roomCode}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå [RoomManagement] Error in BroadcastPlayerJoinedToOthersAsync: {ex.Message}");
        }
    }

    // Dictionary ƒë·ªÉ theo d√µi th·ªùi gian g·ª≠i s·ª± ki·ªán player-joined cu·ªëi c√πng cho m·ªói ng∆∞·ªùi ch∆°i
    private readonly ConcurrentDictionary<string, DateTime> _lastPlayerJoinedTimes = new();
    /// <summary>
    /// Broadcast s·ª± ki·ªán player-joined ch·ªâ t·ªõi nh·ªØng ng∆∞·ªùi ƒë√£ c√≥ trong ph√≤ng tr∆∞·ªõc ƒë√≥
    /// KH√îNG g·ª≠i cho ng∆∞·ªùi v·ª´a join ƒë·ªÉ tr√°nh duplicate event
    /// </summary>
    /// <param name="roomCode">M√£ ph√≤ng</param>
    /// <param name="userId">ID ng∆∞·ªùi ch∆°i m·ªõi</param>
    /// <param name="username">T√™n ng∆∞·ªùi ch∆°i m·ªõi</param>
    public async Task BroadcastPlayerJoinedEventAsync(string roomCode, int userId, string username)
    {
        try
        {
            // Ki·ªÉm tra xem ƒë√£ g·ª≠i s·ª± ki·ªán n√†y g·∫ßn ƒë√¢y ch∆∞a (trong v√≤ng 2 gi√¢y)
            string cacheKey = $"player_joined_{roomCode}_{userId}";
            if (_lastPlayerJoinedTimes.TryGetValue(cacheKey, out var lastTime) && 
                (DateTime.UtcNow - lastTime).TotalMilliseconds < 2000)
            {
                return;
            }
            // C·∫≠p nh·∫≠t th·ªùi gian g·ª≠i m·ªõi nh·∫•t
            _lastPlayerJoinedTimes[cacheKey] = DateTime.UtcNow;
            var playerJoinedData = new
            {
                userId = userId,  // Chuy·ªÉn sang camelCase ƒë·ªÉ ph√π h·ª£p v·ªõi frontend
                username = username,
                score = 0,
                timeTaken = "00:00:00"
            };
            // Broadcast ch·ªâ t·ªõi nh·ªØng ng∆∞·ªùi ƒë√£ c√≥ trong ph√≤ng tr∆∞·ªõc ƒë√≥ (lo·∫°i tr·ª´ ng∆∞·ªùi v·ª´a join)
            await _eventBroadcaster.BroadcastToOthersAsync(roomCode, userId, RoomManagementConstants.Events.PlayerJoined, playerJoinedData);
        }
        catch (Exception ex)
        {
        }
    }
    /// <summary>
    /// X·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i r·ªùi ph√≤ng theo userId
    /// </summary>
    /// <param name="userId">ID c·ªßa ng∆∞·ªùi ch∆°i</param>
    /// <param name="roomCode">M√£ ph√≤ng ƒëang tham gia</param>
    public async Task LeaveRoomByUserIdAsync(int userId, string roomCode)
    {
        try
        {
            // L∆∞u th√¥ng tin ph√≤ng v√† ng∆∞·ªùi ch∆°i tr∆∞·ªõc khi x√≥a ƒë·ªÉ s·ª≠ d·ª•ng sau
            var room = _roomManager.GetRoom(roomCode);
            var playerToRemove = room?.Players.FirstOrDefault(p => p.UserId == userId);
            if (room == null || playerToRemove == null)
            {
                return;
            }
            // Log th√¥ng tin ng∆∞·ªùi ch∆°i s·∫Ω b·ªã x√≥a
            // L∆∞u th√¥ng tin ng∆∞·ªùi ch∆°i ƒë·ªÉ s·ª≠ d·ª•ng sau khi x√≥a
            string username = playerToRemove.Username;
            string? socketId = playerToRemove.SocketId;
            // X√≥a ng∆∞·ªùi ch∆°i kh·ªèi ph√≤ng
            var (success, message, removedPlayer, newHost) = _roomManager.RemovePlayerFromRoomByUserId(userId, roomCode);
            if (!success)
            {
                return;
            }
            // Th√¥ng b√°o host m·ªõi n·∫øu c√≥
            if (newHost != null)
            {
                await _eventBroadcaster.BroadcastHostChangeAsync(roomCode, newHost);
            }
            // C·∫≠p nh·∫≠t danh s√°ch player n·∫øu room c√≤n t·ªìn t·∫°i
            if (_roomManager.RoomExists(roomCode))
            {
                var updatedRoom = _roomManager.GetRoom(roomCode);
                if (updatedRoom != null)
                {
                    // G·ª≠i s·ª± ki·ªán player-left tr∆∞·ªõc
                    var playerLeftData = new
                    {
                        userId = userId,
                        username = username
                    };
                    await _eventBroadcaster.BroadcastToRoomAsync(roomCode, "player-left", playerLeftData);
                    // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o client x·ª≠ l√Ω s·ª± ki·ªán player-left tr∆∞·ªõc
                    await Task.Delay(200);
                    // Sau ƒë√≥ g·ª≠i c·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi ch∆°i
                    await _eventBroadcaster.BroadcastRoomPlayersUpdateAsync(roomCode, updatedRoom.Players);
                }
            }
            // X√≥a socket connection n·∫øu c√≥
            if (!string.IsNullOrEmpty(socketId) && _connections.ContainsKey(socketId))
            {
                _connections.TryRemove(socketId, out _);
            }
        }
        catch (Exception ex)
        {
        }
    }
    /// <summary>
    /// Broadcast s·ª± ki·ªán player-left t·ªõi t·∫•t c·∫£ ng∆∞·ªùi ch∆°i trong ph√≤ng
    /// </summary>
    /// <param name="roomCode">M√£ ph√≤ng</param>
    /// <param name="userId">ID ng∆∞·ªùi ch∆°i r·ªùi ph√≤ng</param>
    /// <param name="username">T√™n ng∆∞·ªùi ch∆°i r·ªùi ph√≤ng</param>
    public async Task BroadcastPlayerLeftEventAsync(string roomCode, int userId, string username)
    {
        try
        {
            var playerLeftData = new
            {
                userId = userId.ToString(),
                username = username
            };
            // Broadcast t·ªõi t·∫•t c·∫£ ng∆∞·ªùi ch∆°i trong ph√≤ng
            await _eventBroadcaster.BroadcastToRoomAsync(roomCode, "player-left", playerLeftData);
        }
        catch (Exception ex)
        {
        }
    }
    /// <summary>
    /// Broadcast message ƒë·∫øn t·∫•t c·∫£ WebSocket connections hi·ªán t·∫°i
    /// D√πng ƒë·ªÉ g·ª≠i th√¥ng b√°o ƒë·ªìng b·ªô gi·ªØa HTTP v√† WebSocket
    /// </summary>
    public async Task BroadcastToAllConnectionsAsync(string roomCode, string eventName, object data)
    {
        try
        {
            await _eventBroadcaster.BroadcastToAllConnectionsAsync(roomCode, eventName, data);
        }
        catch (Exception ex)
        {
        }
    }
    /// <summary>
    /// X·ª≠ l√Ω y√™u c·∫ßu c·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi ch∆°i t·ª´ client
    /// </summary>
    /// <param name="socketId">ID c·ªßa WebSocket connection</param>
    /// <param name="roomCode">M√£ ph√≤ng c·∫ßn c·∫≠p nh·∫≠t</param>
    public async Task RequestPlayersUpdateAsync(string socketId, string roomCode)
    {
        try
        {
            var room = _roomManager.GetRoom(roomCode);
            if (room == null)
            {
                return;
            }
            // G·ª≠i c·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi ch∆°i ch·ªâ cho client y√™u c·∫ßu
            var roomPlayersData = new
            {
                roomCode = roomCode,
                players = room.Players.Select(p => new {
                    userId = p.UserId,
                    username = p.Username,
                    score = p.Score,
                    isHost = p.IsHost,
                    status = p.Status,
                    timeTaken = "00:00:00"
                }).ToList(),
                totalPlayers = room.Players.Count,
                maxPlayers = 10,
                status = "waiting",
                host = room.Players.FirstOrDefault(p => p.IsHost)?.Username
            };
            await _eventBroadcaster.SendToPlayerAsync(socketId, RoomManagementConstants.Events.RoomPlayersUpdated, roomPlayersData);
        }
        catch (Exception ex)
        {
        }
    }
    /// <summary>
    /// L·∫•y th√¥ng tin ph√≤ng theo m√£ ph√≤ng v·ªõi database fallback
    /// </summary>
    /// <param name="roomCode">M√£ ph√≤ng c·∫ßn l·∫•y th√¥ng tin</param>
    /// <returns>Th√¥ng tin ph√≤ng ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y</returns>
    public async Task<GameRoom?> GetRoomAsync(string roomCode)
    {
        var room = _roomManager.GetRoom(roomCode);
        if (room == null)
        {
            Console.WriteLine($"üè† [RoomManagement] Room {roomCode} not found in memory, trying database...");
            
            try
            {
                if (_roomRepository != null)
                {
                    var dbRoom = await _roomRepository.GetRoomByCodeAsync(roomCode);
                    if (dbRoom != null)
                    {
                        Console.WriteLine($"üè† [RoomManagement] Room {roomCode} found in database");
                        
                        // TODO: C√≥ th·ªÉ load players t·ª´ database v√† t·∫°o GameRoom object t∆∞∆°ng ·ª©ng
                        // Hi·ªán t·∫°i ch·ªâ log th√¥ng tin t√¨m th·∫•y
                        
                        return null; // V√¨ ch∆∞a implement ƒë·∫ßy ƒë·ªß conversion t·ª´ DB Room sang GameRoom
                    }
                    else
                    {
                        Console.WriteLine($"üè† [RoomManagement] Room {roomCode} not found in database");
                    }
                }
                else
                {
                    Console.WriteLine($"üè† [RoomManagement] Room repository not available for database lookup");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå [RoomManagement] Error looking up room {roomCode} in database: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine($"üè† [RoomManagement] Room {roomCode} found in memory with {room.Players.Count} players");
        }
        
        return room;
    }

    /// <summary>
    /// L∆∞u th√¥ng tin SocketConnection v√†o database
    /// </summary>
    /// <param name="socketId">Socket ID</param>
    /// <param name="userId">User ID</param>
    /// <param name="roomCode">Room Code</param>
    private async Task SaveSocketConnectionToDatabase(string socketId, int userId, string roomCode)
    {
        try
        {
            if (_socketConnectionDbService == null || _roomRepository == null)
            {
                Console.WriteLine($"‚ö†Ô∏è [RoomManagement] Database services not available, skipping socket connection save for {socketId}");
                return;
            }

            // ‚úÖ L·∫§Y ROOMID T·ª™ DATABASE V√Ä KI·ªÇM TRA K·ª∏ L∆Ø·ª†NG
            var dbRoom = await _roomRepository.GetRoomByCodeAsync(roomCode);
            if (dbRoom != null && dbRoom.Id > 0)
            {
                var now = DateTime.UtcNow;
                
                // ‚úÖ KI·ªÇM TRA XEM SOCKET CONNECTION ƒê√É T·ªíN T·∫†I CH∆ØA
                var existingConnectionDto = await _socketConnectionDbService.GetBySocketIdAsync(socketId);
                
                if (existingConnectionDto != null)
                {
                    // ‚úÖ T·∫†O ENTITY M·ªöI ƒê·ªÇ C·∫¨P NH·∫¨T V·ªöI ROOM_ID V√Ä TIMESTAMP ƒê√öNG
                    var socketConnectionToUpdate = new SocketConnection
                    {
                        Id = existingConnectionDto.Id,
                        SocketId = socketId,
                        UserId = userId,
                        RoomId = dbRoom.Id,
                        ConnectedAt = existingConnectionDto.ConnectedAt,
                        LastActivity = now
                    };
                    
                    await _socketConnectionDbService.UpdateAsync(socketConnectionToUpdate);
                    Console.WriteLine($"‚úÖ [RoomManagement] Updated existing SocketConnection: {socketId} -> Room {roomCode} (ID: {dbRoom.Id})");
                }
                else
                {
                    // ‚úÖ T·∫†O M·ªöI V·ªöI C√ÅC TIMESTAMP CH√çNH X√ÅC
                    var socketConnection = new SocketConnection
                    {
                        SocketId = socketId,
                        UserId = userId,
                        RoomId = dbRoom.Id,
                        ConnectedAt = now,
                        LastActivity = now
                    };

                    await _socketConnectionDbService.CreateAsync(socketConnection);
                    Console.WriteLine($"‚úÖ [RoomManagement] Created new SocketConnection: {socketId} -> Room {roomCode} (ID: {dbRoom.Id})");
                }
                
                // ‚úÖ VERIFY L·∫†I DATABASE RECORD SAU KHI L∆ØU
                var verifyConnection = await _socketConnectionDbService.GetBySocketIdAsync(socketId);
                if (verifyConnection != null && verifyConnection.RoomId.HasValue)
                {
                    Console.WriteLine($"‚úÖ [RoomManagement] Verified SocketConnection in database: RoomId={verifyConnection.RoomId}, ConnectedAt={verifyConnection.ConnectedAt}, LastActivity={verifyConnection.LastActivity}");
                }
                else
                {
                    Console.WriteLine($"‚ùå [RoomManagement] Failed to verify SocketConnection in database for {socketId}");
                }
            }
            else
            {
                Console.WriteLine($"‚ö†Ô∏è [RoomManagement] Room {roomCode} not found in database or invalid ID, cannot save socket connection");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå [RoomManagement] Failed to save SocketConnection to database: {ex.Message}");
            Console.WriteLine($"‚ùå [RoomManagement] Stack trace: {ex.StackTrace}");
        }
    }
}
