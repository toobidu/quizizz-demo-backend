using ConsoleApp1.Service.Interface.Socket;
using ConsoleApp1.Model.DTO.Game;
using System.Collections.Concurrent;
using System.Net.WebSockets;
using System.Text;
using System.Text.Json;

namespace ConsoleApp1.Service.Implement.Socket;

/// <summary>
/// Service qu·∫£n l√Ω ph√≤ng ch∆°i qua WebSocket - Ch·ªãu tr√°ch nhi·ªám:
/// 1. X·ª≠ l√Ω vi·ªác tham gia ph√≤ng (join room)
/// 2. X·ª≠ l√Ω vi·ªác r·ªùi ph√≤ng (leave room)  
/// 3. C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi ch∆°i trong ph√≤ng
/// 4. Broadcast th√¥ng tin ph√≤ng ƒë·∫øn t·∫•t c·∫£ client
/// 5. Qu·∫£n l√Ω host v√† chuy·ªÉn quy·ªÅn host
/// </summary>
public class RoomManagementSocketServiceImplement : IRoomManagementSocketService
{
    // Dictionary l∆∞u tr·ªØ t·∫•t c·∫£ c√°c ph√≤ng game hi·ªán t·∫°i
    // Key: roomCode, Value: GameRoom object
    private readonly ConcurrentDictionary<string, GameRoom> _gameRooms = new();
    
    // Dictionary √°nh x·∫° socketId v·ªõi roomCode
    // Key: socketId, Value: roomCode m√† socket ƒëang tham gia
    private readonly ConcurrentDictionary<string, string> _socketToRoom = new();
    
    // Dictionary l∆∞u tr·ªØ c√°c k·∫øt n·ªëi WebSocket (shared v·ªõi ConnectionService)
    // Key: socketId, Value: WebSocket connection
    private readonly ConcurrentDictionary<string, WebSocket> _connections = new();

    /// <summary>
    /// X·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i tham gia ph√≤ng
    /// </summary>
    /// <param name="socketId">ID c·ªßa WebSocket connection</param>
    /// <param name="roomCode">M√£ ph√≤ng mu·ªën tham gia</param>
    /// <param name="username">T√™n ng∆∞·ªùi ch∆°i</param>
    /// <param name="userId">ID ng∆∞·ªùi ch∆°i trong database</param>
    public async Task JoinRoomAsync(string socketId, string roomCode, string username, int userId)
    {
        Console.WriteLine($"[ROOM] JoinRoomAsync called - socketId: {socketId}, roomCode: {roomCode}, username: {username}, userId: {userId}");
        
        // L∆∞u mapping socketId -> roomCode
        _socketToRoom[socketId] = roomCode;
        
        // T·∫°o ph√≤ng m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
        if (!_gameRooms.ContainsKey(roomCode))
        {
            _gameRooms[roomCode] = new GameRoom { RoomCode = roomCode };
            Console.WriteLine($"[ROOM] Created new game room: {roomCode}");
        }
        
        var gameRoom = _gameRooms[roomCode];
        
        // Ki·ªÉm tra xem player ƒë√£ t·ªìn t·∫°i ch∆∞a (tr√°nh duplicate)
        var existingPlayer = gameRoom.Players.FirstOrDefault(p => p.UserId == userId);
        if (existingPlayer != null)
        {
            Console.WriteLine($"[ROOM] Player {username} (ID: {userId}) already exists in room {roomCode}, updating socket");
            existingPlayer.SocketId = socketId; // C·∫≠p nh·∫≠t socketId m·ªõi
            await UpdateRoomPlayersAsync(roomCode);
            return;
        }
        
        // Ki·ªÉm tra xem c√≥ ph·∫£i ng∆∞·ªùi ƒë·∫ßu ti√™n kh√¥ng (s·∫Ω l√† host)
        var isFirstPlayer = gameRoom.Players.Count == 0;
        
        // T·∫°o player m·ªõi
        var player = new GamePlayer
        {
            Username = username,
            UserId = userId,
            SocketId = socketId,
            IsHost = isFirstPlayer, // Ng∆∞·ªùi ƒë·∫ßu ti√™n l√† host
            JoinTime = DateTime.UtcNow
        };
        
        // Th√™m player v√†o ph√≤ng
        gameRoom.Players.Add(player);
        
        // Log th√¥ng tin join
        var timestamp = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss");
        Console.WriteLine($"[{timestamp}] üîå WEBSOCKET JOIN - Room {roomCode}: {username} (ID: {userId}) joined as {(player.IsHost ? "HOST" : "player")}");
        Console.WriteLine($"[{timestamp}] üìä WEBSOCKET ROOM STATUS - Room {roomCode}: {gameRoom.Players.Count} players connected | Host: {gameRoom.Players.FirstOrDefault(p => p.IsHost)?.Username}");
        
        // G·ª≠i th√¥ng b√°o welcome cho player v·ª´a join
        await SendToPlayerAsync(socketId, "room-joined", new {
            roomCode = roomCode,
            isHost = player.IsHost,
            message = $"Ch√†o m·ª´ng {username} ƒë·∫øn ph√≤ng {roomCode}!"
        });
        
        // C·∫≠p nh·∫≠t danh s√°ch player cho t·∫•t c·∫£ client trong ph√≤ng
        await UpdateRoomPlayersAsync(roomCode);
    }

    /// <summary>
    /// X·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i r·ªùi ph√≤ng
    /// </summary>
    /// <param name="socketId">ID c·ªßa WebSocket connection</param>
    /// <param name="roomCode">M√£ ph√≤ng ƒëang tham gia</param>
    public async Task LeaveRoomAsync(string socketId, string roomCode)
    {
        if (!_gameRooms.ContainsKey(roomCode)) return;
        
        var gameRoom = _gameRooms[roomCode];
        var player = gameRoom.Players.FirstOrDefault(p => p.SocketId == socketId);
        
        if (player != null)
        {
            // X√≥a player kh·ªèi ph√≤ng
            gameRoom.Players.Remove(player);
            _socketToRoom.TryRemove(socketId, out _);
            
            var timestamp = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss");
            Console.WriteLine($"[{timestamp}] üö™ WEBSOCKET LEAVE - Room {roomCode}: {player.Username} (ID: {player.UserId}) left");
            
            // N·∫øu l√† host r·ªùi ph√≤ng v√† c√≤n ng∆∞·ªùi kh√°c
            if (player.IsHost && gameRoom.Players.Count > 0)
            {
                // Chuy·ªÉn host cho ng∆∞·ªùi join s·ªõm nh·∫•t ti·∫øp theo
                var nextHost = gameRoom.Players.OrderBy(p => p.JoinTime ?? DateTime.MaxValue).First();
                nextHost.IsHost = true;
                
                Console.WriteLine($"[{timestamp}] üëë HOST TRANSFER - Room {roomCode}: {nextHost.Username} is now the host");
                
                // Th√¥ng b√°o host m·ªõi cho t·∫•t c·∫£ client
                await BroadcastToRoomAsync(roomCode, "host-changed", new {
                    newHost = nextHost.Username,
                    newHostId = nextHost.UserId,
                    message = $"{nextHost.Username} ƒë√£ tr·ªü th√†nh host m·ªõi"
                });
            }
            
            // N·∫øu kh√¥ng c√≤n ai trong ph√≤ng th√¨ x√≥a ph√≤ng
            if (gameRoom.Players.Count == 0)
            {
                _gameRooms.TryRemove(roomCode, out _);
                Console.WriteLine($"[{timestamp}] üóëÔ∏è ROOM DELETED - Room {roomCode}: No players remaining");
                
                // D·ªçn d·∫πp game session n·∫øu c√≥ game ƒëang ch·∫°y
                // L∆∞u √Ω: Trong th·ª±c t·∫ø c·∫ßn g·ªçi GameFlowSocketService.CleanupGameSessionAsync
                Console.WriteLine($"[ROOM] Game session cleanup needed for empty room {roomCode}");
            }
            else
            {
                // C·∫≠p nh·∫≠t danh s√°ch player cho nh·ªØng ng∆∞·ªùi c√≤n l·∫°i
                await UpdateRoomPlayersAsync(roomCode);
            }
        }
    }

    /// <summary>
    /// C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi ch∆°i trong ph√≤ng cho t·∫•t c·∫£ client
    /// </summary>
    /// <param name="roomCode">M√£ ph√≤ng c·∫ßn c·∫≠p nh·∫≠t</param>
    public async Task UpdateRoomPlayersAsync(string roomCode)
    {
        if (!_gameRooms.TryGetValue(roomCode, out var gameRoom)) return;
        
        // T·∫°o danh s√°ch player ƒë·ªÉ g·ª≠i cho client
        var playerList = gameRoom.Players.Select(p => new {
            username = p.Username,
            userId = p.UserId,
            isHost = p.IsHost,
            joinTime = p.JoinTime,
            isOnline = _connections.ContainsKey(p.SocketId ?? "") && 
                      _connections.TryGetValue(p.SocketId ?? "", out var ws) && 
                      ws.State == System.Net.WebSockets.WebSocketState.Open // Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi th·ª±c t·∫ø
        }).ToList();
        
        // Broadcast danh s√°ch player m·ªõi cho t·∫•t c·∫£ client trong ph√≤ng
        await BroadcastToRoomAsync(roomCode, "room-players-updated", new {
            roomCode = roomCode,
            players = playerList,
            totalPlayers = playerList.Count,
            host = playerList.FirstOrDefault(p => p.isHost)?.username
        });
        
        Console.WriteLine($"[ROOM] Updated player list for room {roomCode}: {playerList.Count} players");
    }
    
    /// <summary>
    /// G·ª≠i message ƒë·∫øn t·∫•t c·∫£ client trong m·ªôt ph√≤ng c·ª• th·ªÉ
    /// </summary>
    private async Task BroadcastToRoomAsync(string roomCode, string eventName, object data)
    {
        if (!_gameRooms.TryGetValue(roomCode, out var gameRoom)) return;
        
        var message = JsonSerializer.Serialize(new {
            eventName = eventName,
            data = data
        });
        var buffer = Encoding.UTF8.GetBytes(message);
        
        // G·ª≠i ƒë·∫øn t·∫•t c·∫£ player trong ph√≤ng
        var sendTasks = gameRoom.Players
            .Where(p => !string.IsNullOrEmpty(p.SocketId))
            .Select(async player =>
            {
                if (_connections.TryGetValue(player.SocketId!, out var socket) && 
                    socket.State == WebSocketState.Open)
                {
                    try
                    {
                        await socket.SendAsync(buffer, WebSocketMessageType.Text, true, CancellationToken.None);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"[ROOM] Failed to send message to {player.Username}: {ex.Message}");
                    }
                }
            });
        
        await Task.WhenAll(sendTasks);
    }
    
    /// <summary>
    /// G·ª≠i message ƒë·∫øn m·ªôt client c·ª• th·ªÉ
    /// </summary>
    private async Task SendToPlayerAsync(string socketId, string eventName, object data)
    {
        if (_connections.TryGetValue(socketId, out var socket) && socket.State == WebSocketState.Open)
        {
            try
            {
                var message = JsonSerializer.Serialize(new {
                    eventName = eventName,
                    data = data
                });
                var buffer = Encoding.UTF8.GetBytes(message);
                await socket.SendAsync(buffer, WebSocketMessageType.Text, true, CancellationToken.None);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[ROOM] Failed to send message to socket {socketId}: {ex.Message}");
            }
        }
    }
}