using ConsoleApp1.Service.Interface.Socket;
using System.Collections.Concurrent;
using System.Net;
using System.Net.WebSockets;
using System.Text;
using System.Text.Json;
using System.Linq;
using System.Text.RegularExpressions;
using ConsoleApp1.Config;

namespace ConsoleApp1.Service.Implement.Socket;

/// <summary>
/// Service qu·∫£n l√Ω k·∫øt n·ªëi WebSocket - Ch·ªãu tr√°ch nhi·ªám:
/// 1. Kh·ªüi ƒë·ªông/d·ª´ng WebSocket server
/// 2. X·ª≠ l√Ω c√°c k·∫øt n·ªëi WebSocket m·ªõi
/// 3. Qu·∫£n l√Ω danh s√°ch c√°c k·∫øt n·ªëi ƒëang ho·∫°t ƒë·ªông
/// 4. X·ª≠ l√Ω ping/pong ƒë·ªÉ gi·ªØ k·∫øt n·ªëi s·ªëng
/// </summary>
public class SocketConnectionServiceImplement : ISocketConnectionService
{
    // Dictionary l∆∞u tr·ªØ t·∫•t c·∫£ c√°c k·∫øt n·ªëi WebSocket hi·ªán t·∫°i (shared)
    private readonly ConcurrentDictionary<string, WebSocket> _connections;
    // Dictionary √°nh x·∫° socketId v·ªõi roomCode (shared)
    private readonly ConcurrentDictionary<string, string> _socketToRoom;
    // Dictionary √°nh x·∫° socketId v·ªõi userId ƒë·ªÉ track users
    private readonly ConcurrentDictionary<string, int> _socketToUserId;
    // Dictionary theo d√µi last pong time cho m·ªói connection
    private readonly ConcurrentDictionary<string, DateTime> _lastPongReceived;
    // HttpListener ƒë·ªÉ l·∫Øng nghe c√°c WebSocket request
    private HttpListener? _listener;
    // Reference t·ªõi RoomManagementSocketService ƒë·ªÉ x·ª≠ l√Ω joinRoom
    private IRoomManagementSocketService? _roomManagementService;

    // ‚úÖ TƒÇNG PONG TIMEOUT L√äN 120 GI√ÇY
    private const int PONG_TIMEOUT_SECONDS = 120;
    private const int PING_INTERVAL_SECONDS = 30;

    /// <summary>
    /// Constructor nh·∫≠n shared dictionaries
    /// </summary>
    public SocketConnectionServiceImplement(
        ConcurrentDictionary<string, WebSocket> connections,
        ConcurrentDictionary<string, string> socketToRoom)
    {
        _connections = connections;
        _socketToRoom = socketToRoom;
        _socketToUserId = new ConcurrentDictionary<string, int>();
        _lastPongReceived = new ConcurrentDictionary<string, DateTime>();
    }

    /// <summary>
    /// Constructor m·∫∑c ƒë·ªãnh (backward compatibility)
    /// </summary>
    public SocketConnectionServiceImplement()
    {
        _connections = new ConcurrentDictionary<string, WebSocket>();
        _socketToRoom = new ConcurrentDictionary<string, string>();
        _socketToUserId = new ConcurrentDictionary<string, int>();
        _lastPongReceived = new ConcurrentDictionary<string, DateTime>();
    }

    /// <summary>
    /// Thi·∫øt l·∫≠p RoomManagementSocketService reference
    /// </summary>
    public void SetRoomManagementService(IRoomManagementSocketService roomManagementService)
    {
        _roomManagementService = roomManagementService;
    }

    /// <summary>
    /// Kh·ªüi ƒë·ªông WebSocket server tr√™n port ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
    /// </summary>
    /// <param name="port">Port ƒë·ªÉ l·∫Øng nghe WebSocket connections</param>
    public async Task StartAsync(int port)
    {
        // Kh·ªüi t·∫°o HttpListener
        _listener = new HttpListener();
        _listener.Prefixes.Add($"http://localhost:{port}/");
        _listener.Start();
        
        Console.WriteLine($"üîå [SocketConnectionService] WebSocket server started on port {port}");

        // Ch·∫°y v√≤ng l·∫∑p l·∫Øng nghe c√°c connection m·ªõi trong background
        _ = Task.Run(async () =>
        {
            while (_listener.IsListening)
            {
                try
                {
                    // Ch·ªù connection m·ªõi
                    var context = await _listener.GetContextAsync();
                    // X·ª≠ l√Ω m·ªói connection trong task ri√™ng bi·ªát
                    _ = Task.Run(() => HandleWebSocketRequestAsync(context));
                }
                catch (HttpListenerException)
                {
                    // Server ƒë√£ d·ª´ng
                    Console.WriteLine("üõë [SocketConnectionService] Server stopped listening");
                    break;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå [SocketConnectionService] Error in listener loop: {ex.Message}");
                }
            }
        });

        // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o server ƒë√£ start
        await Task.Delay(100);
    }

    /// <summary>
    /// D·ª´ng WebSocket server v√† ƒë√≥ng t·∫•t c·∫£ k·∫øt n·ªëi
    /// </summary>
    public async Task StopAsync()
    {
        Console.WriteLine("üõë [SocketConnectionService] Stopping WebSocket server...");
        
        // ƒê√≥ng t·∫•t c·∫£ c√°c k·∫øt n·ªëi WebSocket
        foreach (var connection in _connections.Values)
        {
            if (connection.State == WebSocketState.Open)
            {
                await connection.CloseAsync(WebSocketCloseStatus.NormalClosure, "Server shutdown", CancellationToken.None);
            }
        }
        _connections.Clear();

        // D·ª´ng HttpListener
        _listener?.Stop();
        _listener?.Close();
        
        Console.WriteLine("‚úÖ [SocketConnectionService] WebSocket server stopped");
    }

    /// <summary>
    /// X·ª≠ l√Ω WebSocket request m·ªõi v·ªõi validation
    /// </summary>
    private async Task HandleWebSocketRequestAsync(HttpListenerContext context)
    {
        var clientIP = context.Request.RemoteEndPoint?.Address?.ToString() ?? "unknown";
        var path = context.Request.Url?.AbsolutePath ?? "/";
        var userAgent = context.Request.Headers["User-Agent"] ?? "unknown";
        
        Console.WriteLine($"üì° [WebSocket] New request from {clientIP} to path: {path}");
        Console.WriteLine($"üì° [WebSocket] User-Agent: {userAgent}");
        
        try
        {
            // ‚úÖ KI·ªÇM TRA ƒê√öNG WEBSOCKET REQUEST
            if (!context.Request.IsWebSocketRequest)
            {
                Console.WriteLine($"‚ùå [WebSocket] Not a WebSocket request from {clientIP}");
                context.Response.StatusCode = 400;
                await context.Response.OutputStream.WriteAsync(Encoding.UTF8.GetBytes("WebSocket connection required"));
                context.Response.Close();
                return;
            }

            // ‚úÖ VALIDATE URL PATH (optional - c√≥ th·ªÉ skip n·∫øu kh√¥ng c·∫ßn)
            if (!IsValidWebSocketPath(path))
            {
                Console.WriteLine($"‚ùå [WebSocket] Invalid path '{path}' from {clientIP}");
                context.Response.StatusCode = 404;
                await context.Response.OutputStream.WriteAsync(Encoding.UTF8.GetBytes($"Path '{path}' not supported"));
                context.Response.Close();
                return;
            }

            // ‚úÖ EXTRACT ROOMCODE T·ª™ PATH (n·∫øu c√≥ pattern nh∆∞ /waiting-room/{roomCode})
            var roomCodeFromPath = ExtractRoomCodeFromPath(path);
            if (!string.IsNullOrEmpty(roomCodeFromPath))
            {
                Console.WriteLine($"üè† [WebSocket] Room code from path: {roomCodeFromPath}");
            }

            // ‚úÖ CH·∫§P NH·∫¨N WEBSOCKET CONNECTION
            var webSocketContext = await context.AcceptWebSocketAsync(null);
            var webSocket = webSocketContext.WebSocket;
            var socketId = Guid.NewGuid().ToString();

            Console.WriteLine($"üîó [WebSocket] Connection accepted: {socketId} from {clientIP}");
            Console.WriteLine($"üîó [WebSocket] Connection state: {webSocket.State}");

            // L∆∞u metadata
            var connectionInfo = new ConnectionMetadata 
            {
                SocketId = socketId,
                ClientIP = clientIP,
                ConnectedAt = DateTime.UtcNow,
                Path = path,
                RoomCodeFromPath = roomCodeFromPath,
                UserAgent = userAgent
            };

            // L∆∞u k·∫øt n·ªëi v√†o dictionary
            _connections[socketId] = webSocket;

            // X·ª≠ l√Ω giao ti·∫øp v·ªõi client
            await HandleWebSocketCommunication(webSocket, socketId, connectionInfo);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå [WebSocket] Error handling request from {clientIP}: {ex.Message}");
            Console.WriteLine($"‚ùå [WebSocket] Stack trace: {ex.StackTrace}");
            try
            {
                context.Response.StatusCode = 500;
                await context.Response.OutputStream.WriteAsync(Encoding.UTF8.GetBytes($"Server error: {ex.Message}"));
                context.Response.Close();
            }
            catch (Exception closeEx)
            {
                Console.WriteLine($"‚ùå [WebSocket] Error closing response: {closeEx.Message}");
            }
        }
    }

    /// <summary>
    /// Validate WebSocket path
    /// </summary>
    private bool IsValidWebSocketPath(string path)
    {
        // Cho ph√©p m·ªçi path, ho·∫∑c implement logic c·ª• th·ªÉ
        var validPaths = new[] { "/", "/ws", "/websocket" };
        var validPatterns = new[] { @"^/waiting-room/[A-Za-z0-9]+$" };
        
        // Check exact paths
        if (validPaths.Contains(path.ToLower()))
            return true;
            
        // Check patterns
        foreach (var pattern in validPatterns)
        {
            if (Regex.IsMatch(path, pattern))
                return true;
        }
        
        // Allow all for now
        return true;
    }

    /// <summary>
    /// Extract room code from path nh∆∞ /waiting-room/{roomCode}
    /// </summary>
    private string? ExtractRoomCodeFromPath(string path)
    {
        var match = Regex.Match(path, @"^/waiting-room/([A-Za-z0-9]+)$");
        return match.Success ? match.Groups[1].Value : null;
    }

    /// <summary>
    /// Enhanced WebSocket communication v·ªõi better logging
    /// </summary>
    private async Task HandleWebSocketCommunication(WebSocket webSocket, string socketId, ConnectionMetadata metadata)
    {
        var buffer = new byte[1024 * 4];
        var lastPongReceived = DateTime.UtcNow;
        var pingCount = 0;
        var messageCount = 0;

        Console.WriteLine($"üîÑ [WebSocket] Starting communication loop for {socketId}");

        // ‚úÖ ENHANCED PING TIMER v·ªõi timeout detection
        var pingTimer = new Timer(async _ =>
        {
            if (webSocket.State == WebSocketState.Open)
            {
                try
                {
                    pingCount++;
                    
                    // ‚úÖ CHECK PONG TIMEOUT (120 seconds)
                    var timeSinceLastPong = DateTime.UtcNow - lastPongReceived;
                    if (timeSinceLastPong.TotalSeconds > PONG_TIMEOUT_SECONDS)
                    {
                        Console.WriteLine($"‚è∞ [WebSocket] Pong timeout for {socketId} ({timeSinceLastPong.TotalSeconds:F1}s)");
                        Console.WriteLine($"üîå [WebSocket] Closing connection {socketId} due to pong timeout");
                        
                        await webSocket.CloseAsync(
                            WebSocketCloseStatus.PolicyViolation, 
                            "Pong timeout", 
                            CancellationToken.None
                        );
                        return;
                    }

                    var pingMessage = JsonSerializer.Serialize(new
                    {
                        type = "ping",
                        data = new { 
                            timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(),
                            pingCount = pingCount
                        },
                        timestamp = DateTime.UtcNow
                    });
                    
                    var pingBuffer = Encoding.UTF8.GetBytes(pingMessage);
                    await webSocket.SendAsync(pingBuffer, WebSocketMessageType.Text, true, CancellationToken.None);
                    
                    Console.WriteLine($"üèì [WebSocket] Sent ping #{pingCount} to {socketId}");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå [WebSocket] Error sending ping to {socketId}: {ex.Message}");
                    Console.WriteLine($"üîå [WebSocket] Will close connection {socketId} due to ping error");
                }
            }
        }, null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));

        try
        {
            // ‚úÖ MAIN COMMUNICATION LOOP v·ªõi detailed logging
            while (webSocket.State == WebSocketState.Open)
            {
                try
                {
                    Console.WriteLine($"üëÇ [WebSocket] Waiting for message from {socketId}...");
                    
                    var result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
                    
                    Console.WriteLine($"üì® [WebSocket] Received from {socketId}: Type={result.MessageType}, Count={result.Count}, EndOfMessage={result.EndOfMessage}");

                    if (result.MessageType == WebSocketMessageType.Text)
                    {
                        messageCount++;
                        var message = Encoding.UTF8.GetString(buffer, 0, result.Count);
                        
                        Console.WriteLine($"üì• [WebSocket] Message #{messageCount} from {socketId}: {message}");
                        
                        // Track pong responses v√† heartbeat
                        if (message.Contains("\"type\":\"pong\"") || message.Contains("\"event\":\"pong\"") || 
                            message.Contains("\"event\":\"heartbeat\"") || message.Contains("\"type\":\"heartbeat\""))
                        {
                            lastPongReceived = DateTime.UtcNow;
                            _lastPongReceived[socketId] = DateTime.UtcNow;
                            Console.WriteLine($"üèì [WebSocket] Received pong/heartbeat from {socketId}");
                        }
                        
                        await ProcessWebSocketMessage(socketId, message);
                    }
                    else if (result.MessageType == WebSocketMessageType.Close)
                    {
                        Console.WriteLine($"üîå [WebSocket] Client {socketId} requested close: {result.CloseStatus} - {result.CloseStatusDescription}");
                        await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Acknowledged", CancellationToken.None);
                        break;
                    }
                    else if (result.MessageType == WebSocketMessageType.Binary)
                    {
                        Console.WriteLine($"üì¶ [WebSocket] Received binary data from {socketId} (not supported)");
                    }
                }
                catch (OperationCanceledException)
                {
                    Console.WriteLine($"‚èπÔ∏è [WebSocket] Operation cancelled for {socketId}");
                    break;
                }
                catch (WebSocketException wsEx)
                {
                    Console.WriteLine($"üîå [WebSocket] WebSocket exception for {socketId}: {wsEx.Message}");
                    Console.WriteLine($"üîå [WebSocket] WebSocket error code: {wsEx.WebSocketErrorCode}");
                    Console.WriteLine($"üîå [WebSocket] Native error code: {wsEx.NativeErrorCode}");
                    break;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå [WebSocket] Unexpected error for {socketId}: {ex.Message}");
            Console.WriteLine($"‚ùå [WebSocket] Exception type: {ex.GetType().Name}");
            Console.WriteLine($"‚ùå [WebSocket] Stack trace: {ex.StackTrace}");
        }
        finally
        {
            // ‚úÖ DETAILED CLEANUP LOGGING
            var duration = DateTime.UtcNow - metadata.ConnectedAt;
            Console.WriteLine($"üîå [WebSocket] Connection {socketId} closing after {duration.TotalMinutes:F1} minutes");
            Console.WriteLine($"üìä [WebSocket] Stats for {socketId}: {messageCount} messages, {pingCount} pings");
            Console.WriteLine($"üîå [WebSocket] Final state: {webSocket.State}");
            
            pingTimer?.Dispose();
            _connections.TryRemove(socketId, out _);

            // ‚úÖ ENHANCED ROOM CLEANUP
            if (_socketToRoom.TryGetValue(socketId, out var roomCode))
            {
                Console.WriteLine($"üö™ [WebSocket] Cleaning up room membership for {socketId} in room {roomCode}");
                
                try
                {
                    if (_roomManagementService != null)
                    {
                        var room = await _roomManagementService.GetRoomAsync(roomCode);
                        if (room != null)
                        {
                            var player = room.Players.FirstOrDefault(p => p.SocketId == socketId);
                            if (player != null)
                            {
                                Console.WriteLine($"üö™ [WebSocket] Player {player.Username} (ID: {player.UserId}) leaving room {roomCode} due to disconnect");
                                await _roomManagementService.LeaveRoomByUserIdAsync(player.UserId, roomCode);
                            }
                            else
                            {
                                Console.WriteLine($"‚ö†Ô∏è [WebSocket] Player not found in room {roomCode} for socket {socketId}");
                                await _roomManagementService.LeaveRoomAsync(socketId, roomCode);
                            }
                        }
                        else
                        {
                            Console.WriteLine($"‚ö†Ô∏è [WebSocket] Room {roomCode} not found for socket {socketId}");
                        }
                    }
                    else
                    {
                        Console.WriteLine($"‚ùå [WebSocket] RoomManagementService not available for cleanup");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå [WebSocket] Error during room cleanup for {socketId}: {ex.Message}");
                }
                finally
                {
                    _socketToRoom.TryRemove(socketId, out _);
                    _socketToUserId.TryRemove(socketId, out _);
                    _lastPongReceived.TryRemove(socketId, out _);
                    Console.WriteLine($"üßπ [WebSocket] Removed socket-to-room and user mappings for {socketId}");
                }
            }
            
            Console.WriteLine($"‚úÖ [WebSocket] Cleanup completed for {socketId}");
        }
    }

    /// <summary>
    /// X·ª≠ l√Ω message nh·∫≠n ƒë∆∞·ª£c t·ª´ WebSocket client
    /// </summary>
    private async Task ProcessWebSocketMessage(string socketId, string message)
    {
        var startTime = DateTime.UtcNow;
        
        try
        {
            Console.WriteLine($"üì• [Message] Processing from {socketId}: {message}");

            if (string.IsNullOrWhiteSpace(message))
            {
                Console.WriteLine($"‚ö†Ô∏è [Message] Empty message from {socketId}");
                await SendAckResponse(socketId, "unknown", false, "Empty message");
                return;
            }

            Dictionary<string, object>? data;
            try
            {
                data = JsonSerializer.Deserialize<Dictionary<string, object>>(message);
            }
            catch (JsonException jsonEx)
            {
                Console.WriteLine($"‚ùå [Message] Invalid JSON from {socketId}: {jsonEx.Message}");
                await SendAckResponse(socketId, "unknown", false, "Invalid JSON format");
                return;
            }

            if (data == null)
            {
                Console.WriteLine($"‚ö†Ô∏è [Message] Null data from {socketId}");
                await SendAckResponse(socketId, "unknown", false, "Null message data");
                return;
            }

            var eventName = data.GetValueOrDefault("event")?.ToString() ?? data.GetValueOrDefault("type")?.ToString();
            
            if (string.IsNullOrEmpty(eventName))
            {
                Console.WriteLine($"‚ö†Ô∏è [Message] Missing event name from {socketId}");
                await SendAckResponse(socketId, "unknown", false, "Missing event name");
                return;
            }

            Console.WriteLine($"üéØ [Message] Event '{eventName}' from {socketId}");

            // ‚úÖ LOG VALIDATION CHO C√ÅC EVENTS QUAN TR·ªåNG
            switch (eventName.ToLower())
            {
                case "join-room":
                case "joinroom":
                    await ValidateAndHandleJoinRoom(socketId, data, eventName);
                    break;
                case "leave-room":
                case "leaveroom":
                    await HandleLeaveRoomEvent(socketId, data);
                    break;
                case "start-game":
                case "startgame":
                    await HandleStartGameEvent(socketId, data);
                    break;
                case "player-ready":
                case "playerready":
                    await HandlePlayerReadyEvent(socketId, data);
                    break;
                case "request-players-update":
                    await HandleRequestPlayersUpdateEvent(socketId, data);
                    break;
                case "ping":
                    await HandlePingEvent(socketId);
                    break;
                case "pong":
                    Console.WriteLine($"üèì [Message] Pong received from {socketId}");
                    break;
                case "heartbeat":
                    await HandleHeartbeatEvent(socketId, data);
                    break;
                case "player-left":
                    await HandlePlayerLeftEvent(socketId, data);
                    break;
                default:
                    Console.WriteLine($"‚ö†Ô∏è [Message] Unhandled event '{eventName}' from {socketId}");
                    await SendAckResponse(socketId, eventName, false, "Event not supported");
                    break;
            }
            
            var duration = DateTime.UtcNow - startTime;
            Console.WriteLine($"‚úÖ [Message] Processed '{eventName}' in {duration.TotalMilliseconds:F1}ms");
        }
        catch (Exception ex)
        {
            var duration = DateTime.UtcNow - startTime;
            Console.WriteLine($"‚ùå [Message] Error processing message from {socketId} after {duration.TotalMilliseconds:F1}ms: {ex.Message}");
            Console.WriteLine($"‚ùå [Message] Exception type: {ex.GetType().Name}");
            Console.WriteLine($"‚ùå [Message] Stack trace: {ex.StackTrace}");
            
            try
            {
                await SendAckResponse(socketId, "unknown", false, "Internal server error");
            }
            catch (Exception ackEx)
            {
                Console.WriteLine($"‚ùå [Message] Failed to send error ACK to {socketId}: {ackEx.Message}");
            }
        }
    }

    /// <summary>
    /// Validate v√† handle join-room v·ªõi enhanced logging
    /// </summary>
    private async Task ValidateAndHandleJoinRoom(string socketId, Dictionary<string, object> data, string eventName)
    {
        Console.WriteLine($"üö™ [JoinRoom] Processing join-room from {socketId}");
        
        // Extract data v·ªõi validation
        var roomCode = ExtractStringValue(data, "roomCode");
        var username = ExtractStringValue(data, "username"); 
        var userIdStr = ExtractStringValue(data, "userId");
        
        Console.WriteLine($"üö™ [JoinRoom] Data - roomCode: {roomCode}, username: {username}, userId: {userIdStr}");
        
        // Validation
        if (string.IsNullOrWhiteSpace(roomCode))
        {
            Console.WriteLine($"‚ùå [JoinRoom] Missing roomCode from {socketId}");
            await SendAckResponse(socketId, eventName, false, "Missing room code");
            return;
        }
        
        if (string.IsNullOrWhiteSpace(username))
        {
            Console.WriteLine($"‚ùå [JoinRoom] Missing username from {socketId}");
            await SendAckResponse(socketId, eventName, false, "Missing username");
            return;
        }
        
        if (!int.TryParse(userIdStr, out var userId))
        {
            Console.WriteLine($"‚ùå [JoinRoom] Invalid userId '{userIdStr}' from {socketId}");
            await SendAckResponse(socketId, eventName, false, "Invalid user ID");
            return;
        }
        
        // ‚úÖ VALIDATE ROOMCODE FORMAT
        if (!IsValidRoomCode(roomCode))
        {
            Console.WriteLine($"‚ùå [JoinRoom] Invalid roomCode format '{roomCode}' from {socketId}");
            await SendAckResponse(socketId, eventName, false, "Invalid room code format");
            return;
        }
        
        Console.WriteLine($"‚úÖ [JoinRoom] Validation passed for {username} joining {roomCode}");
        
        await HandleJoinRoomEvent(socketId, data);
    }

    /// <summary>
    /// Validate room code format
    /// </summary>
    private bool IsValidRoomCode(string roomCode)
    {
        if (string.IsNullOrWhiteSpace(roomCode)) return false;
        if (roomCode.Length < RoomManagementConstants.Limits.MinRoomCodeLength) return false;
        if (roomCode.Length > RoomManagementConstants.Limits.MaxRoomCodeLength) return false;
        
        // Ch·ªâ cho ph√©p alphanumeric
        return roomCode.All(char.IsLetterOrDigit);
    }

    /// <summary>
    /// Extract string value v·ªõi fallback cho nested data
    /// </summary>
    private string? ExtractStringValue(Dictionary<string, object> data, string key)
    {
        // Direct key
        var directValue = data.GetValueOrDefault(key)?.ToString();
        if (!string.IsNullOrEmpty(directValue)) return directValue;
        
        // Nested trong "data"
        if (data.ContainsKey("data"))
        {
            try
            {
                var nestedData = JsonSerializer.Deserialize<Dictionary<string, object>>(data["data"].ToString() ?? "{}");
                return nestedData?.GetValueOrDefault(key)?.ToString();
            }
            catch
            {
                return null;
            }
        }
        
        return null;
    }

    /// <summary>
    /// X·ª≠ l√Ω event join-room t·ª´ WebSocket client
    /// </summary>
    private async Task HandleJoinRoomEvent(string socketId, Dictionary<string, object> data)
    {
        try
        {
            Console.WriteLine($"üö™ [SocketConnectionService] join-room received from {socketId}");
            
            // L·∫•y th√¥ng tin t·ª´ message - ki·ªÉm tra c·∫£ direct v√† nested trong "data"
            string? roomCode = null;
            string? username = null;
            string? userIdStr = null;

            // Ki·ªÉm tra direct fields tr∆∞·ªõc
            roomCode = data.GetValueOrDefault("roomCode")?.ToString();
            username = data.GetValueOrDefault("username")?.ToString();
            userIdStr = data.GetValueOrDefault("userId")?.ToString();

            // N·∫øu kh√¥ng c√≥, ki·ªÉm tra trong "data" nested
            if (string.IsNullOrEmpty(roomCode) && data.ContainsKey("data"))
            {
                var nestedData = JsonSerializer.Deserialize<Dictionary<string, object>>(data["data"].ToString() ?? "{}");
                if (nestedData != null)
                {
                    roomCode = nestedData.GetValueOrDefault("roomCode")?.ToString();
                    username = nestedData.GetValueOrDefault("username")?.ToString();
                    userIdStr = nestedData.GetValueOrDefault("userId")?.ToString();
                }
            }

            if (string.IsNullOrEmpty(roomCode))
            {
                await SendAckResponse(socketId, "join-room", false, "Missing room code");
                return;
            }

            // N·∫øu kh√¥ng c√≥ username/userId, c·∫ßn l·∫•y t·ª´ session ho·∫∑c t·ª´ database
            if (string.IsNullOrEmpty(username) || !int.TryParse(userIdStr, out var userId))
            {
                await SendAckResponse(socketId, "join-room", false, "Missing username or invalid userId");
                return;
            }

            // L∆∞u mapping socketId -> roomCode v√† socketId -> userId
            _socketToRoom[socketId] = roomCode;
            _socketToUserId[socketId] = userId;

            // S·ª≠ d·ª•ng shared RoomManagementSocketService
            if (_roomManagementService != null)
            {
                await _roomManagementService.JoinRoomAsync(socketId, roomCode, username, userId);
                await SendAckResponse(socketId, "join-room", true, "Successfully joined room");
                
                Console.WriteLine($"‚úÖ [SocketConnectionService] {username} joined room {roomCode}");
                
                // G·ª≠i s·ª± ki·ªán players-updated sau khi join th√†nh c√¥ng
                try
                {
                    var room = await _roomManagementService.GetRoomAsync(roomCode);
                    if (room != null)
                    {
                        // Broadcast player-joined event
                        await _roomManagementService.BroadcastToAllConnectionsAsync(roomCode, "player-joined", new
                        {
                            userId = userId,
                            username = username,
                            isHost = room.Players.Any(p => p.UserId == userId && p.IsHost),
                            roomCode = roomCode,
                            timestamp = DateTime.UtcNow
                        });
                        
                        // Broadcast players-updated event ƒë·ªÉ ƒë·ªìng b·ªô danh s√°ch
                        await _roomManagementService.BroadcastToAllConnectionsAsync(roomCode, "players-updated", new
                        {
                            players = room.Players.Select(p => new { 
                                userId = p.UserId, 
                                username = p.Username, 
                                isHost = p.IsHost,
                                status = p.Status ?? "waiting"
                            }).ToList(),
                            roomCode = roomCode
                        });
                        
                        Console.WriteLine($"üì° [SocketConnectionService] Broadcasted player-joined and players-updated for {username} in room {roomCode}");
                    }
                }
                catch (Exception broadcastEx)
                {
                    Console.WriteLine($"‚ùå [SocketConnectionService] Error broadcasting join events: {broadcastEx.Message}");
                }
            }
            else
            {
                await SendAckResponse(socketId, "join-room", false, "Room service not available");
                Console.WriteLine($"‚ùå [SocketConnectionService] RoomManagementService not available");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå [SocketConnectionService] Error handling join-room: {ex.Message}");
            await SendAckResponse(socketId, "join-room", false, "Internal server error");
        }
    }

    /// <summary>
    /// X·ª≠ l√Ω event leave-room t·ª´ WebSocket client
    /// </summary>
    private async Task HandleLeaveRoomEvent(string socketId, Dictionary<string, object> data)
    {
        try
        {
            Console.WriteLine($"üö™ [SocketConnectionService] leave-room received from {socketId}");
            
            // L·∫•y th√¥ng tin t·ª´ message - ki·ªÉm tra c·∫£ direct v√† nested trong "data"
            string? roomCode = null;
            string? userIdStr = null;

            // Ki·ªÉm tra direct fields tr∆∞·ªõc
            roomCode = data.GetValueOrDefault("roomCode")?.ToString();
            userIdStr = data.GetValueOrDefault("userId")?.ToString();

            // N·∫øu kh√¥ng c√≥, ki·ªÉm tra trong "data" nested
            if ((string.IsNullOrEmpty(roomCode) || string.IsNullOrEmpty(userIdStr)) && data.ContainsKey("data"))
            {
                var nestedData = JsonSerializer.Deserialize<Dictionary<string, object>>(data["data"].ToString() ?? "{}");
                if (nestedData != null)
                {
                    roomCode = roomCode ?? nestedData.GetValueOrDefault("roomCode")?.ToString();
                    userIdStr = userIdStr ?? nestedData.GetValueOrDefault("userId")?.ToString();
                }
            }

            // N·∫øu v·∫´n kh√¥ng c√≥ roomCode, th·ª≠ l·∫•y t·ª´ mapping
            if (string.IsNullOrEmpty(roomCode))
            {
                if (!_socketToRoom.TryGetValue(socketId, out roomCode))
                {
                    await SendAckResponse(socketId, "leave-room", false, "Room code not found");
                    return;
                }
            }

            // Ki·ªÉm tra xem socket c√≥ th·ª±c s·ª± ƒëang ·ªü trong ph√≤ng kh√¥ng
            if (!_socketToRoom.TryGetValue(socketId, out var currentRoom) || currentRoom != roomCode)
            {
                await SendAckResponse(socketId, "leave-room", false, "Not in specified room");
                return;
            }

            // S·ª≠ d·ª•ng shared RoomManagementSocketService
            if (_roomManagementService != null)
            {
                // N·∫øu c√≥ userId, s·ª≠ d·ª•ng LeaveRoomByUserIdAsync ƒë·ªÉ ƒë·∫£m b·∫£o x√≥a ng∆∞·ªùi ch∆°i kh·ªèi database
                if (!string.IsNullOrEmpty(userIdStr) && int.TryParse(userIdStr, out var userId))
                {
                    await _roomManagementService.LeaveRoomByUserIdAsync(userId, roomCode);
                }
                else
                {
                    await _roomManagementService.LeaveRoomAsync(socketId, roomCode);
                }

                // X√≥a mapping
                _socketToRoom.TryRemove(socketId, out _);
                _socketToUserId.TryRemove(socketId, out _);

                await SendAckResponse(socketId, "leave-room", true, "Successfully left room");
                
                // G·ª≠i players-updated event sau khi leave
                try
                {
                    var room = await _roomManagementService.GetRoomAsync(roomCode);
                    if (room != null)
                    {
                        await _roomManagementService.BroadcastToAllConnectionsAsync(roomCode, "players-updated", new
                        {
                            players = room.Players.Select(p => new { 
                                userId = p.UserId, 
                                username = p.Username, 
                                isHost = p.IsHost,
                                status = p.Status ?? "waiting"
                            }).ToList(),
                            roomCode = roomCode
                        });
                        
                        Console.WriteLine($"üì° [SocketConnectionService] Broadcasted players-updated after leave in room {roomCode}");
                    }
                }
                catch (Exception broadcastEx)
                {
                    Console.WriteLine($"‚ùå [SocketConnectionService] Error broadcasting leave events: {broadcastEx.Message}");
                }
                
                Console.WriteLine($"‚úÖ [SocketConnectionService] Socket {socketId} left room {roomCode}");
            }
            else
            {
                await SendAckResponse(socketId, "leave-room", false, "Room service not available");
                Console.WriteLine($"‚ùå [SocketConnectionService] RoomManagementService not available");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå [SocketConnectionService] Error handling leave-room: {ex.Message}");
            await SendAckResponse(socketId, "leave-room", false, "Internal server error");
        }
    }

    /// <summary>
    /// X·ª≠ l√Ω event request-players-update t·ª´ WebSocket client
    /// </summary>
    private async Task HandleRequestPlayersUpdateEvent(string socketId, Dictionary<string, object> data)
    {
        try
        {
            Console.WriteLine($"üîÑ [SocketConnectionService] request-players-update received from {socketId}");

            // L·∫•y th√¥ng tin t·ª´ message - ki·ªÉm tra c·∫£ direct v√† nested trong "data"
            string? roomCode = null;

            // Ki·ªÉm tra direct fields tr∆∞·ªõc
            roomCode = data.GetValueOrDefault("roomCode")?.ToString();

            // N·∫øu kh√¥ng c√≥, ki·ªÉm tra trong "data" nested
            if (string.IsNullOrEmpty(roomCode) && data.ContainsKey("data"))
            {
                var nestedData = JsonSerializer.Deserialize<Dictionary<string, object>>(data["data"].ToString() ?? "{}");
                if (nestedData != null)
                {
                    roomCode = nestedData.GetValueOrDefault("roomCode")?.ToString();
                }
            }

            // N·∫øu v·∫´n kh√¥ng c√≥ roomCode, th·ª≠ l·∫•y t·ª´ mapping
            if (string.IsNullOrEmpty(roomCode))
            {
                _socketToRoom.TryGetValue(socketId, out roomCode);
            }

            if (string.IsNullOrEmpty(roomCode))
            {
                await SendAckResponse(socketId, "request-players-update", false, "Room code not found");
                return;
            }

            // S·ª≠ d·ª•ng shared RoomManagementSocketService
            if (_roomManagementService != null)
            {
                await _roomManagementService.RequestPlayersUpdateAsync(socketId, roomCode);
                await SendAckResponse(socketId, "request-players-update", true, "Players update sent");
            }
            else
            {
                await SendAckResponse(socketId, "request-players-update", false, "Room service not available");
                Console.WriteLine($"‚ùå [SocketConnectionService] RoomManagementService not available");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå [SocketConnectionService] Error handling request-players-update: {ex.Message}");
            await SendAckResponse(socketId, "request-players-update", false, "Internal server error");
        }
    }

    /// <summary>
    /// X·ª≠ l√Ω ping event t·ª´ client ƒë·ªÉ maintain connection
    /// </summary>
    private async Task HandlePingEvent(string socketId)
    {
        try
        {
            Console.WriteLine($"üèì [SocketConnectionService] Ping received from {socketId}");
            
            // Send pong response
            var pongResponse = new
            {
                type = "pong",
                timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(),
                socketId = socketId
            };

            await SendMessageToSocketAsync(socketId, pongResponse);
            Console.WriteLine($"üèì [SocketConnectionService] Pong sent to {socketId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå [SocketConnectionService] Error in HandlePingEvent: {ex.Message}");
        }
    }

    /// <summary>
    /// X·ª≠ l√Ω heartbeat event t·ª´ client ƒë·ªÉ maintain connection
    /// </summary>
    private async Task HandleHeartbeatEvent(string socketId, Dictionary<string, object> data)
    {
        try
        {
            Console.WriteLine($"üíì [SocketConnectionService] Heartbeat received from {socketId}");
            
            // C·∫≠p nh·∫≠t last heartbeat time
            _lastPongReceived[socketId] = DateTime.UtcNow;
            
            // Send heartbeat response v·ªõi status ok
            var heartbeatResponse = new
            {
                @event = "heartbeat",
                data = new
                {
                    status = "ok",
                    timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(),
                    socketId = socketId
                },
                timestamp = DateTime.UtcNow
            };

            await SendMessageToSocketAsync(socketId, heartbeatResponse);
            Console.WriteLine($"üíì [SocketConnectionService] Heartbeat response sent to {socketId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå [SocketConnectionService] Error in HandleHeartbeatEvent: {ex.Message}");
        }
    }

    /// <summary>
    /// X·ª≠ l√Ω player-left event t·ª´ client
    /// </summary>
    private async Task HandlePlayerLeftEvent(string socketId, Dictionary<string, object> data)
    {
        try
        {
            Console.WriteLine($"üö™ [SocketConnectionService] player-left received from {socketId}");
            
            // L·∫•y th√¥ng tin t·ª´ message
            var roomCode = ExtractStringValue(data, "roomCode");
            var userIdStr = ExtractStringValue(data, "userId");
            var username = ExtractStringValue(data, "username");
            
            // N·∫øu kh√¥ng c√≥ roomCode, l·∫•y t·ª´ mapping
            if (string.IsNullOrEmpty(roomCode))
            {
                _socketToRoom.TryGetValue(socketId, out roomCode);
            }
            
            if (string.IsNullOrEmpty(roomCode))
            {
                await SendAckResponse(socketId, "player-left", false, "Room code not found");
                return;
            }
            
            Console.WriteLine($"üö™ [SocketConnectionService] Processing player-left: roomCode={roomCode}, userId={userIdStr}, username={username}");
            
            if (_roomManagementService != null)
            {
                // N·∫øu c√≥ userId, s·ª≠ d·ª•ng ƒë·ªÉ x√≥a player kh·ªèi database
                if (!string.IsNullOrEmpty(userIdStr) && int.TryParse(userIdStr, out var userId))
                {
                    await _roomManagementService.LeaveRoomByUserIdAsync(userId, roomCode);
                    
                    // Broadcast player-left event cho c√°c players kh√°c
                    await _roomManagementService.BroadcastToAllConnectionsAsync(roomCode, "player-left", new
                    {
                        userId = userId,
                        username = username ?? "Unknown",
                        roomCode = roomCode,
                        timestamp = DateTime.UtcNow
                    });
                    
                    // G·ª≠i players-updated event ƒë·ªÉ ƒë·ªìng b·ªô danh s√°ch
                    var room = await _roomManagementService.GetRoomAsync(roomCode);
                    if (room != null)
                    {
                        await _roomManagementService.BroadcastToAllConnectionsAsync(roomCode, "players-updated", new
                        {
                            players = room.Players.Select(p => new { 
                                userId = p.UserId, 
                                username = p.Username, 
                                isHost = p.IsHost,
                                status = p.Status
                            }).ToList(),
                            roomCode = roomCode
                        });
                    }
                }
                else
                {
                    await _roomManagementService.LeaveRoomAsync(socketId, roomCode);
                }
                
                // X√≥a mapping
                _socketToRoom.TryRemove(socketId, out _);
                _socketToUserId.TryRemove(socketId, out _);
                
                await SendAckResponse(socketId, "player-left", true, "Player left successfully");
                Console.WriteLine($"‚úÖ [SocketConnectionService] Player left room {roomCode} successfully");
            }
            else
            {
                await SendAckResponse(socketId, "player-left", false, "Room service not available");
                Console.WriteLine($"‚ùå [SocketConnectionService] RoomManagementService not available");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå [SocketConnectionService] Error handling player-left: {ex.Message}");
            await SendAckResponse(socketId, "player-left", false, "Internal server error");
        }
    }

    /// <summary>
    /// X·ª≠ l√Ω event start-game t·ª´ WebSocket client
    /// </summary>
    private async Task HandleStartGameEvent(string socketId, Dictionary<string, object> data)
    {
        try
        {
            Console.WriteLine($"üéÆ [SocketConnectionService] start-game received from {socketId}");
            
            // L·∫•y th√¥ng tin t·ª´ message - ki·ªÉm tra c·∫£ direct v√† nested trong "data"
            string? roomCode = null;
            string? hostUserIdStr = null;
            
            // Ki·ªÉm tra direct fields tr∆∞·ªõc
            roomCode = data.GetValueOrDefault("roomCode")?.ToString();
            hostUserIdStr = data.GetValueOrDefault("hostUserId")?.ToString();
            
            // N·∫øu kh√¥ng c√≥, ki·ªÉm tra trong "data" nested
            if (string.IsNullOrEmpty(roomCode) && data.ContainsKey("data"))
            {
                var nestedData = JsonSerializer.Deserialize<Dictionary<string, object>>(data["data"].ToString() ?? "{}");
                if (nestedData != null)
                {
                    roomCode = roomCode ?? nestedData.GetValueOrDefault("roomCode")?.ToString();
                    hostUserIdStr = hostUserIdStr ?? nestedData.GetValueOrDefault("hostUserId")?.ToString();
                }
            }
            
            // N·∫øu v·∫´n kh√¥ng c√≥ roomCode, th·ª≠ l·∫•y t·ª´ mapping
            if (string.IsNullOrEmpty(roomCode))
            {
                _socketToRoom.TryGetValue(socketId, out roomCode);
            }
            
            if (string.IsNullOrEmpty(roomCode) || !int.TryParse(hostUserIdStr, out var hostUserId))
            {
                Console.WriteLine($"‚ùå [SocketConnectionService] Invalid start-game data: roomCode={roomCode}, hostUserId={hostUserIdStr}");
                await SendAckResponse(socketId, "start-game", false, "Invalid room code or host user ID");
                return;
            }
            
            Console.WriteLine($"üîç [SocketConnectionService] Processing start-game for room: {roomCode}, host: {hostUserId}");
            
            if (_roomManagementService != null)
            {
                var room = await _roomManagementService.GetRoomAsync(roomCode);
                if (room == null)
                {
                    Console.WriteLine($"‚ùå [SocketConnectionService] Room {roomCode} not found");
                    await SendAckResponse(socketId, "start-game", false, "Room not found");
                    return;
                }
                
                var hostPlayer = room.Players.FirstOrDefault(p => p.UserId == hostUserId && p.IsHost);
                if (hostPlayer == null)
                {
                    Console.WriteLine($"‚ùå [SocketConnectionService] User {hostUserId} is not host of room {roomCode}");
                    await SendAckResponse(socketId, "start-game", false, "Unauthorized: Only host can start game");
                    return;
                }
                
                if (room.Players.Count < 1)
                {
                    Console.WriteLine($"‚ùå [SocketConnectionService] Not enough players in room {roomCode}");
                    await SendAckResponse(socketId, "start-game", false, "Need at least 1 player to start game");
                    return;
                }
                
                Console.WriteLine($"‚úÖ [SocketConnectionService] Room validation passed. Players in room: {room.Players.Count}");
                
                // ‚úÖ G·ª¨I ACK TH√ÄNH C√îNG CHO HOST TR∆Ø·ªöC
                await SendAckResponse(socketId, "start-game", true, "Game starting...");
                
                var gameStartData = new
                {
                    roomCode = roomCode,
                    gameData = new
                    {
                        roomCode = roomCode,
                        selectedTopicIds = data.GetValueOrDefault("selectedTopicIds") ?? new List<int>(),
                        questionCount = data.GetValueOrDefault("questionCount") ?? 10,
                        timeLimit = data.GetValueOrDefault("timeLimit") ?? 30,
                        hostUserId = hostUserId,
                        startTime = DateTime.UtcNow.ToString("O"),
                        players = room.Players.Select(p => new { 
                            userId = p.UserId, 
                            username = p.Username, 
                            isHost = p.IsHost 
                        }).ToList()
                    }
                };
                
                // Broadcast game-started event
                await _roomManagementService.BroadcastToAllConnectionsAsync(roomCode, "game-started", gameStartData);
                
                Console.WriteLine($"üì° [SocketConnectionService] game-started broadcasted to room {roomCode}");
                Console.WriteLine($"üì° [SocketConnectionService] Players notified: {string.Join(",", room.Players.Select(p => p.Username))}");
                
                // C·∫≠p nh·∫≠t game state ·ªü backend
                room.GameState = "starting";
            }
            else
            {
                Console.WriteLine($"‚ùå [SocketConnectionService] RoomManagementService not available");
                await SendAckResponse(socketId, "start-game", false, "Service not available");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå [SocketConnectionService] Error handling start-game: {ex.Message}");
            await SendAckResponse(socketId, "start-game", false, "Internal server error");
        }
    }

    /// <summary>
    /// X·ª≠ l√Ω player ready event
    /// </summary>
    private async Task HandlePlayerReadyEvent(string socketId, Dictionary<string, object> data)
    {
        try
        {
            Console.WriteLine($"üéØ [SocketConnectionService] player-ready received from {socketId}");

            var roomCode = data.GetValueOrDefault("roomCode")?.ToString();
            var userIdStr = data.GetValueOrDefault("userId")?.ToString();

            // N·∫øu kh√¥ng c√≥ roomCode, l·∫•y t·ª´ mapping
            if (string.IsNullOrEmpty(roomCode))
            {
                _socketToRoom.TryGetValue(socketId, out roomCode);
            }

            if (string.IsNullOrEmpty(roomCode) || string.IsNullOrEmpty(userIdStr))
            {
                await SendAckResponse(socketId, "player-ready", false, "Missing roomCode or userId");
                return;
            }

            if (_roomManagementService != null && int.TryParse(userIdStr, out var userId))
            {
                var room = await _roomManagementService.GetRoomAsync(roomCode);
                if (room != null)
                {
                    var player = room.Players.FirstOrDefault(p => p.UserId == userId);
                    if (player != null)
                    {
                        player.Status = "ready";

                        // Broadcast player ready status
                        await _roomManagementService.BroadcastToAllConnectionsAsync(roomCode, "player-status-updated", new
                        {
                            userId = userId,
                            username = player.Username,
                            status = "ready",
                            roomCode = roomCode
                        });

                        await SendAckResponse(socketId, "player-ready", true, "Player marked as ready");
                        Console.WriteLine($"‚úÖ [SocketConnectionService] Player {userId} marked as ready in room {roomCode}");
                    }
                    else
                    {
                        await SendAckResponse(socketId, "player-ready", false, "Player not found in room");
                    }
                }
                else
                {
                    await SendAckResponse(socketId, "player-ready", false, "Room not found");
                }
            }
            else
            {
                await SendAckResponse(socketId, "player-ready", false, "Invalid data or service unavailable");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå [SocketConnectionService] Error handling player-ready: {ex.Message}");
            await SendAckResponse(socketId, "player-ready", false, "Internal server error");
        }
    }

    /// <summary>
    /// G·ª≠i ACK response v·ªÅ cho client
    /// </summary>
    private async Task SendAckResponse(string socketId, string eventType, bool success, string message)
    {
        try
        {
            var response = new
            {
                type = success ? "ack" : "error",
                @event = eventType,
                data = new { 
                    success = success,
                    message = message 
                },
                timestamp = DateTime.UtcNow
            };
            
            var responseJson = JsonSerializer.Serialize(response);
            var responseBuffer = Encoding.UTF8.GetBytes(responseJson);
            
            if (_connections.TryGetValue(socketId, out var socket) && socket.State == WebSocketState.Open)
            {
                await socket.SendAsync(responseBuffer, WebSocketMessageType.Text, true, CancellationToken.None);
                Console.WriteLine($"üì§ [SocketConnectionService] Sent {(success ? "ACK" : "ERROR")} for {eventType} to {socketId}: {message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå [SocketConnectionService] Error sending ACK response to {socketId}: {ex.Message}");
        }
    }

    /// <summary>
    /// G·ª≠i message ƒë·∫øn m·ªôt socket c·ª• th·ªÉ
    /// </summary>
    private async Task SendMessageToSocketAsync(string socketId, object message)
    {
        try
        {
            if (_connections.TryGetValue(socketId, out var socket) && socket.State == WebSocketState.Open)
            {
                var messageJson = JsonSerializer.Serialize(message);
                var messageBuffer = Encoding.UTF8.GetBytes(messageJson);
                
                await socket.SendAsync(messageBuffer, WebSocketMessageType.Text, true, CancellationToken.None);
                Console.WriteLine($"üì§ [SocketConnectionService] Sent message to {socketId}");
            }
            else
            {
                Console.WriteLine($"‚ö†Ô∏è [SocketConnectionService] Socket {socketId} not found or not open");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå [SocketConnectionService] Error sending message to {socketId}: {ex.Message}");
        }
    }

    /// <summary>
    /// Connection metadata ƒë·ªÉ tracking
    /// </summary>
    public class ConnectionMetadata
    {
        public string SocketId { get; set; } = "";
        public string ClientIP { get; set; } = "";
        public DateTime ConnectedAt { get; set; }
        public string Path { get; set; } = "";
        public string? RoomCodeFromPath { get; set; }
        public string UserAgent { get; set; } = "";
    }
}
